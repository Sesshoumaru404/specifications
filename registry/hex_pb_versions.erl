%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.23.0
-module(hex_pb_versions).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2]).
-export([merge_msgs/3]).
-export([verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).



encode_msg(Msg, MsgName) ->
    encode_msg(Msg, MsgName, []).


encode_msg(Msg, MsgName, _Opts) ->
    verify_msg(Msg, MsgName),
    case MsgName of
      'Package' -> e_msg_Package(Msg);
      'Versions' -> e_msg_Versions(Msg)
    end.


e_msg_Package(Msg) -> e_msg_Package(Msg, <<>>).


e_msg_Package(#{name := F1, version := F2}, Bin) ->
    B1 = begin
	   TrF1 = id(F1), e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2),
      if TrF2 == [] -> B1;
	 true -> e_field_Package_version(TrF2, B1)
      end
    end.

e_msg_Versions(Msg) -> e_msg_Versions(Msg, <<>>).


e_msg_Versions(#{packages := F1}, Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true -> e_field_Versions_packages(TrF1, Bin)
      end
    end.

e_field_Package_version([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem), Bin2),
    e_field_Package_version(Rest, Bin3);
e_field_Package_version([], Bin) -> Bin.

e_mfield_Versions_packages(Msg, Bin) ->
    SubBin = e_msg_Package(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Versions_packages([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Versions_packages(id(Elem), Bin2),
    e_field_Versions_packages(Rest, Bin3);
e_field_Versions_packages([], Bin) -> Bin.



e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      'Package' -> d_msg_Package(Bin);
      'Versions' -> d_msg_Versions(Bin)
    end.



d_msg_Package(Bin) ->
    dfp_read_field_def_Package(Bin, 0, 0, id('$undef'),
			       id([])).

dfp_read_field_def_Package(<<10, Rest/binary>>, Z1, Z2,
			   F1, F2) ->
    d_field_Package_name(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Package(<<18, Rest/binary>>, Z1, Z2,
			   F1, F2) ->
    d_field_Package_version(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Package(<<>>, 0, 0, F1, F2) ->
    #{name => F1, version => lists_reverse(F2)};
dfp_read_field_def_Package(Other, Z1, Z2, F1, F2) ->
    dg_read_field_def_Package(Other, Z1, Z2, F1, F2).

dg_read_field_def_Package(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_Package(Rest, N + 7, X bsl N + Acc,
			      F1, F2);
dg_read_field_def_Package(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Package_name(Rest, 0, 0, F1, F2);
      18 -> d_field_Package_version(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Package(Rest, 0, 0, F1, F2);
	    1 -> skip_64_Package(Rest, 0, 0, F1, F2);
	    2 -> skip_length_delimited_Package(Rest, 0, 0, F1, F2);
	    5 -> skip_32_Package(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_Package(<<>>, 0, 0, F1, F2) ->
    #{name => F1, version => lists_reverse(F2)}.

d_field_Package_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2)
    when N < 57 ->
    d_field_Package_name(Rest, N + 7, X bsl N + Acc, F1,
			 F2);
d_field_Package_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Package(Rest2, 0, 0, NewFValue, F2).


d_field_Package_version(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2)
    when N < 57 ->
    d_field_Package_version(Rest, N + 7, X bsl N + Acc, F1,
			    F2);
d_field_Package_version(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Package(Rest2, 0, 0, F1,
			       cons(NewFValue, F2)).


skip_varint_Package(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2) ->
    skip_varint_Package(Rest, Z1, Z2, F1, F2);
skip_varint_Package(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2) ->
    dfp_read_field_def_Package(Rest, Z1, Z2, F1, F2).


skip_length_delimited_Package(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_Package(Rest, N + 7,
				  X bsl N + Acc, F1, F2);
skip_length_delimited_Package(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Package(Rest2, 0, 0, F1, F2).


skip_32_Package(<<_:32, Rest/binary>>, Z1, Z2, F1,
		F2) ->
    dfp_read_field_def_Package(Rest, Z1, Z2, F1, F2).


skip_64_Package(<<_:64, Rest/binary>>, Z1, Z2, F1,
		F2) ->
    dfp_read_field_def_Package(Rest, Z1, Z2, F1, F2).


d_msg_Versions(Bin) ->
    dfp_read_field_def_Versions(Bin, 0, 0, id([])).

dfp_read_field_def_Versions(<<10, Rest/binary>>, Z1, Z2,
			    F1) ->
    d_field_Versions_packages(Rest, Z1, Z2, F1);
dfp_read_field_def_Versions(<<>>, 0, 0, F1) ->
    #{packages => lists_reverse(F1)};
dfp_read_field_def_Versions(Other, Z1, Z2, F1) ->
    dg_read_field_def_Versions(Other, Z1, Z2, F1).

dg_read_field_def_Versions(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_Versions(Rest, N + 7, X bsl N + Acc,
			       F1);
dg_read_field_def_Versions(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Versions_packages(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Versions(Rest, 0, 0, F1);
	    1 -> skip_64_Versions(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_Versions(Rest, 0, 0, F1);
	    5 -> skip_32_Versions(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_Versions(<<>>, 0, 0, F1) ->
    #{packages => lists_reverse(F1)}.

d_field_Versions_packages(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1)
    when N < 57 ->
    d_field_Versions_packages(Rest, N + 7, X bsl N + Acc,
			      F1);
d_field_Versions_packages(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Package(Bs)),
    dfp_read_field_def_Versions(Rest2, 0, 0,
				cons(NewFValue, F1)).


skip_varint_Versions(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1) ->
    skip_varint_Versions(Rest, Z1, Z2, F1);
skip_varint_Versions(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1) ->
    dfp_read_field_def_Versions(Rest, Z1, Z2, F1).


skip_length_delimited_Versions(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_Versions(Rest, N + 7,
				   X bsl N + Acc, F1);
skip_length_delimited_Versions(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Versions(Rest2, 0, 0, F1).


skip_32_Versions(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_Versions(Rest, Z1, Z2, F1).


skip_64_Versions(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_Versions(Rest, Z1, Z2, F1).






merge_msgs(Prev, New, MsgName) ->
    case MsgName of
      'Package' -> merge_msg_Package(Prev, New);
      'Versions' -> merge_msg_Versions(Prev, New)
    end.

merge_msg_Package(#{name := PFname,
		    version := PFversion},
		  #{name := NFname, version := NFversion}) ->
    #{name =>
	  if NFname =:= undefined -> PFname;
	     true -> NFname
	  end,
      version => 'erlang_++'(PFversion, NFversion)}.

merge_msg_Versions(#{packages := PFpackages},
		   #{packages := NFpackages}) ->
    #{packages => 'erlang_++'(PFpackages, NFpackages)}.



verify_msg(Msg, MsgName) ->
    case MsgName of
      'Package' -> v_msg_Package(Msg, ['Package']);
      'Versions' -> v_msg_Versions(Msg, ['Versions']);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_Package/2}).
v_msg_Package(#{name := F1, version := F2}, Path) ->
    v_type_string(F1, [name | Path]),
    if is_list(F2) ->
	   _ = [v_type_string(Elem, [version | Path])
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F2, Path)
    end,
    ok;
v_msg_Package(M, Path) when is_map(M) ->
    mk_type_error({missing_fields,
		   [name, version] -- maps:keys(M), 'Package'},
		  M, Path);
v_msg_Package(X, Path) ->
    mk_type_error({expected_msg, 'Package'}, X, Path).

-dialyzer({nowarn_function,v_msg_Versions/2}).
v_msg_Versions(#{packages := F1}, Path) ->
    if is_list(F1) ->
	   _ = [v_msg_Package(Elem, [packages | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Package'}}, F1,
			 Path)
    end,
    ok;
v_msg_Versions(M, Path) when is_map(M) ->
    mk_type_error({missing_fields,
		   [packages] -- maps:keys(M), 'Versions'},
		  M, Path);
v_msg_Versions(X, Path) ->
    mk_type_error({expected_msg, 'Versions'}, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({nowarn_unused_function,id/1}).
-compile({inline,id/1}).
id(X) -> X.

-compile({nowarn_unused_function,cons/2}).
-compile({inline,cons/2}).
cons(Elem, Acc) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/1}).
-compile({inline,lists_reverse/1}).
'lists_reverse'(L) -> lists:reverse(L).

-compile({nowarn_unused_function,'erlang_++'/2}).
-compile({inline,'erlang_++'/2}).
'erlang_++'(A, B) -> A ++ B.



get_msg_defs() ->
    [{{msg, 'Package'},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => required, opts => []},
       #{name => version, fnum => 2, rnum => 3, type => string,
	 occurrence => repeated, opts => []}]},
     {{msg, 'Versions'},
      [#{name => packages, fnum => 1, rnum => 2,
	 type => {msg, 'Package'}, occurrence => repeated,
	 opts => []}]}].


get_msg_names() -> ['Package', 'Versions'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Package') ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => required, opts => []},
     #{name => version, fnum => 2, rnum => 3, type => string,
       occurrence => repeated, opts => []}];
find_msg_def('Versions') ->
    [#{name => packages, fnum => 1, rnum => 2,
       type => {msg, 'Package'}, occurrence => repeated,
       opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.23.0".

gpb_version_as_list() ->
    [3,23,0].
